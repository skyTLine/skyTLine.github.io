<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Titan&#39;Notes</title>
  
  <subtitle>Better late than never</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-21T11:14:54.971Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>leitian</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java对象和json字符串之间转换工具之fastjson</title>
    <link href="http://yoursite.com/2018/06/21/java%E5%AF%B9%E8%B1%A1%E5%92%8Cjson%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E4%B9%8Bfastjson/"/>
    <id>http://yoursite.com/2018/06/21/java对象和json字符串之间转换工具之fastjson/</id>
    <published>2018-06-21T10:45:20.000Z</published>
    <updated>2018-06-21T11:14:54.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="fastjson"><a href="#fastjson" class="headerlink" title="fastjson"></a>fastjson</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Fastjson，是阿里巴巴提供的一个Java语言编写的高性能功能完善的JSON库。</p><h4 id="常用api介绍"><a href="#常用api介绍" class="headerlink" title="常用api介绍"></a>常用api介绍</h4><blockquote></blockquote><p>public static final Object parse(String text); // 把JSON文本parse为JSONObject或者JSONArray<br>public static final JSONObject parseObject(String text)； // 把JSON文本parse成JSONObject<br>public static final <t> T parseObject(String text, Class<t> clazz); // 把JSON文本parse为JavaBean<br>public static final JSONArray parseArray(String text); // 把JSON文本parse成JSONArray<br>public static final <t> List<t> parseArray(String text, Class<t> clazz); //把JSON文本parse成JavaBean集合<br>public static final String toJSONString(Object object); // 将JavaBean序列化为JSON文本<br>public static final String toJSONString(Object object, boolean prettyFormat); // 将JavaBean序列化为带格式的JSON文本<br>public static final Object toJSON(Object javaObject); 将JavaBean转换为JSONObject或者JSONArray。</t></t></t></t></t></p><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">package com.ctrip.gs.live.business.service.remoting.soa20.test;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.alibaba.fastjson.serializer.SerializerFeature;</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class JsonConverTestDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static class Staff &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private int age;</span><br><span class="line">        private String position;</span><br><span class="line">        private String hobby;</span><br><span class="line">        private Date createTime;</span><br><span class="line"></span><br><span class="line">        public Staff() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Staff(String name, int age, String position, String hobby, Date createTime) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">            this.position = position;</span><br><span class="line">            this.hobby = hobby;</span><br><span class="line">            this.createTime = createTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setName(String name) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public int getAge() &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setAge(int age) &#123;</span><br><span class="line">            this.age = age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getPosition() &#123;</span><br><span class="line">            return position;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setPosition(String position) &#123;</span><br><span class="line">            this.position = position;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getHobby() &#123;</span><br><span class="line">            return hobby;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setHobby(String hobby) &#123;</span><br><span class="line">            this.hobby = hobby;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Date getCreateTime() &#123;</span><br><span class="line">            return createTime;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public void setCreateTime(Date createTime) &#123;</span><br><span class="line">            this.createTime = createTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;======下面是实例对象通过gson转换为json字符串======&quot;);</span><br><span class="line">        // javabean to json</span><br><span class="line">        Staff staff1 = new Staff(&quot;和大佬&quot;, 28, &quot;web开发一把手&quot;, &quot;肥仔快乐水&quot;, new Date());</span><br><span class="line">        System.out.println(JSON.toJSONString(staff1));</span><br><span class="line">        System.out.println(JSON.toJSONString(staff1, SerializerFeature.WriteDateUseDateFormat));</span><br><span class="line"></span><br><span class="line">        // list to json</span><br><span class="line">        List&lt;Staff&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(staff1);</span><br><span class="line">        Staff staff2 = new Staff(&quot;小牛&quot;, 25, &quot;java开发小喽喽&quot;, &quot;霸王洗发水&quot;, new Date());</span><br><span class="line">        list.add(staff2);</span><br><span class="line">        System.out.println(JSON.toJSONString(list));</span><br><span class="line"></span><br><span class="line">        // map json</span><br><span class="line">        Map&lt;String, Staff&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;gay1&quot;, staff1);</span><br><span class="line">        map.put(&quot;gay2&quot;, staff2);</span><br><span class="line">        System.out.println(JSON.toJSONString(map));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;======下面是json直接通过gson转换为实例对象======&quot;);</span><br><span class="line"></span><br><span class="line">        //注意：Staff必须有默认无参构造方法</span><br><span class="line">        /**</span><br><span class="line">         * 下面是json直接通过gson转换为实例对象</span><br><span class="line">         */</span><br><span class="line">        // json to javabean</span><br><span class="line">        String objectStr = &quot;&#123;\&quot;name\&quot;:\&quot;和大佬\&quot;,\&quot;age\&quot;:28,\&quot;position\&quot;:\&quot;web开发一把手\&quot;,\&quot;hobby\&quot;:\&quot;肥仔快乐水\&quot;&#125;&quot;;</span><br><span class="line">        System.out.println(&quot;json to javabean:&quot; + JSON.parseObject(objectStr, Staff.class).toString());</span><br><span class="line"></span><br><span class="line">        // json to list</span><br><span class="line">        String listStr = &quot;[&#123;\&quot;name\&quot;:\&quot;和大佬\&quot;,\&quot;age\&quot;:28,\&quot;position\&quot;:\&quot;web开发一把手\&quot;,\&quot;hobby\&quot;:\&quot;肥仔快乐水\&quot;&#125;,&#123;\&quot;name\&quot;:\&quot;小牛\&quot;,\&quot;age\&quot;:25,\&quot;position\&quot;:\&quot;java开发小喽喽\&quot;,\&quot;hobby\&quot;:\&quot;霸王洗发水\&quot;&#125;]&quot;;</span><br><span class="line">        for (JsonConverTestDemo.Staff staff : JSON.parseArray(listStr, Staff.class)) &#123;</span><br><span class="line">            System.out.println(&quot;json to list:&quot; + staff);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // json to map</span><br><span class="line">        String mapStr = &quot;&#123;\&quot;gay1\&quot;:&#123;\&quot;name\&quot;:\&quot;和大佬\&quot;,\&quot;age\&quot;:28,\&quot;position\&quot;:\&quot;web开发一把手\&quot;,\&quot;hobby\&quot;:\&quot;肥仔快乐水\&quot;&#125;,\&quot;gay2\&quot;:&#123;\&quot;name\&quot;:\&quot;小牛\&quot;,\&quot;age\&quot;:25,\&quot;position\&quot;:\&quot;java开发小喽喽\&quot;,\&quot;hobby\&quot;:\&quot;霸王洗发水\&quot;&#125;&#125;&quot;;</span><br><span class="line">        for (Object o : ((Map) JSON.parseObject(mapStr)).entrySet()) &#123;</span><br><span class="line">            Map.Entry&lt;String, JsonConverTestDemo.Staff&gt; entry = (Map.Entry&lt;String, Staff&gt;) o;</span><br><span class="line">            System.out.println(&quot;key: &quot; + entry.getKey() + &quot;  &quot; + &quot;value: &quot; + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跟Gson对比：</p><blockquote></blockquote><p>fastJson是按照set方法的名字来转换的，而Gson则是按照属性的名字来转换，所以Staff类必须有set方法，<br>同时json字符串转javaBean的时候，Staff里必须有默认无参构造方法！</p><h4 id="SerializerFeature序列化属性"><a href="#SerializerFeature序列化属性" class="headerlink" title="SerializerFeature序列化属性"></a>SerializerFeature序列化属性</h4><blockquote><p>DisableCheckSpecialChar：一个对象的字符串属性中如果有特殊字符如双引号，将会在转成json时带有反斜杠转移符。如果不需要转义，可以使用这个属性。默认为false<br>QuoteFieldNames———-输出key时是否使用双引号,默认为true<br>WriteMapNullValue——–是否输出值为null的字段,默认为false<br>WriteNullNumberAsZero—-数值字段如果为null,输出为0,而非null<br>WriteNullListAsEmpty—–List字段如果为null,输出为[],而非null<br>WriteNullStringAsEmpty—字符类型字段如果为null,输出为”“,而非null<br>WriteNullBooleanAsFalse–Boolean字段如果为null,输出为false,而非null</p></blockquote><h4 id="java对象和json字符串之间转换工具之Gson"><a href="#java对象和json字符串之间转换工具之Gson" class="headerlink" title="java对象和json字符串之间转换工具之Gson"></a>java对象和json字符串之间转换工具之Gson</h4><p><a href="https://skytline.github.io/2018/06/21/java%E5%AF%B9%E8%B1%A1%E5%92%8Cjson%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E4%B9%8BGson/" target="_blank" rel="noopener">点击跳转</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;fastjson&quot;&gt;&lt;a href=&quot;#fastjson&quot; class=&quot;headerlink&quot; title=&quot;fastjson&quot;&gt;&lt;/a&gt;fastjson&lt;/h3&gt;&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>java对象和json字符串之间转换工具之Gson</title>
    <link href="http://yoursite.com/2018/06/21/java%E5%AF%B9%E8%B1%A1%E5%92%8Cjson%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E4%B9%8BGson/"/>
    <id>http://yoursite.com/2018/06/21/java对象和json字符串之间转换工具之Gson/</id>
    <published>2018-06-21T08:07:31.000Z</published>
    <updated>2018-06-21T11:12:16.931Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Gson"><a href="#Gson" class="headerlink" title="Gson"></a>Gson</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>Gson相比org.json最大的好处是从json字符串转向java实例时候少了依据每个实例自己赋值的过程，比如在org.json的时候，我们先从json字符串构建一个jsonobject，然后用各种的json get方法获取到每个字段的值，这是一个体力活。<br>而gson依据反射机制我们只要传递我们要实例化的类型class进去返回就是创建好的实例。大大减少了代码量。<br>Gson提供了fromJson() 和toJson() 两个直接用于解析和生成的方法，前者实现反序列化，后者实现了序列化。</p><h4 id="创建Gson"><a href="#创建Gson" class="headerlink" title="创建Gson"></a>创建Gson</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">package com.ctrip.gs.live.business.service.remoting.soa20.test;</span><br><span class="line"></span><br><span class="line">import com.google.gson.Gson;</span><br><span class="line">import com.google.gson.GsonBuilder;</span><br><span class="line"></span><br><span class="line">public class JsonUtils &#123;</span><br><span class="line">    public static final String DATE_FORMAT = &quot;yyyy-MM-dd HH:mm:ss&quot;;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 创建GSON</span><br><span class="line">     */</span><br><span class="line">    public static Gson getGson() &#123;</span><br><span class="line">        return new GsonBuilder().serializeNulls().disableHtmlEscaping().setDateFormat(DATE_FORMAT).create();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Gson gson = new GsonBuilder()</span><br><span class="line">//序列化null</span><br><span class="line">.serializeNulls()</span><br><span class="line">// 设置日期时间格式，另有2个重载方法</span><br><span class="line">// 在序列化和反序化时均生效</span><br><span class="line">.setDateFormat(&quot;yyyy-MM-dd&quot;)</span><br><span class="line">// 禁此序列化内部类</span><br><span class="line">.disableInnerClassSerialization()</span><br><span class="line">//生成不可执行的Json（多了 )]&#125;&apos; 这4个字符）</span><br><span class="line">.generateNonExecutableJson()</span><br><span class="line">//禁止转义html标签</span><br><span class="line">.disableHtmlEscaping()</span><br><span class="line">//格式化输出</span><br><span class="line">.setPrettyPrinting()</span><br><span class="line">.create();</span><br></pre></td></tr></table></figure></p><h4 id="java实例-gt-json"><a href="#java实例-gt-json" class="headerlink" title="java实例-&gt;json"></a>java实例-&gt;json</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">package com.ctrip.gs.live.business.service.remoting.soa20.test;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class ObjectToJson extends JsonUtils &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * javabean to json</span><br><span class="line">     *</span><br><span class="line">     * @param person</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String javabeanToJson(JsonConverTestDemo.Staff person) &#123;</span><br><span class="line">        String json = getGson().toJson(person);</span><br><span class="line">        return json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * list to json</span><br><span class="line">     *</span><br><span class="line">     * @param list</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String listToJson(List&lt;JsonConverTestDemo.Staff&gt; list) &#123;</span><br><span class="line">        String json = getGson().toJson(list);</span><br><span class="line">        return json;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * map to json</span><br><span class="line">     *</span><br><span class="line">     * @param map</span><br><span class="line">     * @return</span><br><span class="line">     */</span><br><span class="line">    public static String mapToJson(Map&lt;String, JsonConverTestDemo.Staff&gt; map) &#123;</span><br><span class="line">        String json = getGson().toJson(map);</span><br><span class="line">        return json;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="json-gt-java实例"><a href="#json-gt-java实例" class="headerlink" title="json-&gt;java实例"></a>json-&gt;java实例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">package com.ctrip.gs.live.business.service.remoting.soa20.test;</span><br><span class="line"></span><br><span class="line">import com.google.common.reflect.TypeToken;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">public class JsonToObject extends JsonUtils &#123;</span><br><span class="line">    /**</span><br><span class="line">     * json to javabean</span><br><span class="line">     *</span><br><span class="line">     * @param json</span><br><span class="line">     */</span><br><span class="line">    public static void jsonToJavaBean(String json) &#123;</span><br><span class="line">        JsonConverTestDemo.Staff staff = getGson().fromJson(json, JsonConverTestDemo.Staff.class);//对于javabean直接给出class实例</span><br><span class="line">        System.out.println(staff.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * json字符串转List集合</span><br><span class="line">     */</span><br><span class="line"></span><br><span class="line">    public static void jsonToList(String json) &#123;</span><br><span class="line">        List&lt;JsonConverTestDemo.Staff&gt; staffs = getGson().fromJson(json, new TypeToken&lt;List&lt;JsonConverTestDemo.Staff&gt;&gt;() &#123;</span><br><span class="line">        &#125;.getType());//对于不是类的情况，用这个参数给出</span><br><span class="line">        for (JsonConverTestDemo.Staff staff : staffs) &#123;</span><br><span class="line">            System.out.println(staff);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void jsonToMap(String json) &#123;</span><br><span class="line">        // TODO Auto-generated method stub</span><br><span class="line">        Map&lt;String, JsonConverTestDemo.Staff&gt; maps = getGson().fromJson(json, new TypeToken&lt;Map&lt;String, JsonConverTestDemo.Staff&gt;&gt;() &#123;</span><br><span class="line">        &#125;.getType());</span><br><span class="line">        for (Map.Entry&lt;String, JsonConverTestDemo.Staff&gt; entry : maps.entrySet()) &#123;</span><br><span class="line">            System.out.println(&quot;key: &quot; + entry.getKey() + &quot;  &quot; + &quot;value: &quot; + entry.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">package com.ctrip.gs.live.business.service.remoting.soa20.test;</span><br><span class="line"></span><br><span class="line">import java.util.*;</span><br><span class="line"></span><br><span class="line">public class JsonConverTestDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static class Staff &#123;</span><br><span class="line">        private String name;</span><br><span class="line">        private int age;</span><br><span class="line">        private String position;</span><br><span class="line">        private String hobby;</span><br><span class="line">        private Date createTime;</span><br><span class="line"></span><br><span class="line">        public Staff(String name, int age, String position, String hobby, Date createTime) &#123;</span><br><span class="line">            this.name = name;</span><br><span class="line">            this.age = age;</span><br><span class="line">            this.position = position;</span><br><span class="line">            this.hobby = hobby;</span><br><span class="line">            this.createTime = createTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.out.println(&quot;======下面是实例对象通过gson转换为json字符串======&quot;);</span><br><span class="line">        // javabean to json</span><br><span class="line">        Staff staff1 = new Staff(&quot;和大佬&quot;, 28, &quot;web开发一把手&quot;, &quot;肥仔快乐水&quot;, new Date());</span><br><span class="line">        System.out.println(ObjectToJson.javabeanToJson(staff1));</span><br><span class="line"></span><br><span class="line">        // list to json</span><br><span class="line">        List&lt;Staff&gt; list = new ArrayList&lt;&gt;();</span><br><span class="line">        list.add(staff1);</span><br><span class="line">        Staff staff2 = new Staff(&quot;小牛&quot;, 25, &quot;java开发小喽喽&quot;, &quot;霸王洗发水&quot;, new Date());</span><br><span class="line">        list.add(staff2);</span><br><span class="line">        System.out.println(ObjectToJson.listToJson(list));</span><br><span class="line"></span><br><span class="line">        // map json</span><br><span class="line">        Map&lt;String, Staff&gt; map = new HashMap&lt;&gt;();</span><br><span class="line">        map.put(&quot;gay1&quot;, staff1);</span><br><span class="line">        map.put(&quot;gay2&quot;, staff2);</span><br><span class="line">        System.out.println(ObjectToJson.mapToJson(map));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;======下面是json直接通过gson转换为实例对象======&quot;);</span><br><span class="line"></span><br><span class="line">        /**</span><br><span class="line">         * 下面是json直接通过gson转换为实例对象</span><br><span class="line">         */</span><br><span class="line">        // json to javabean</span><br><span class="line">        String objectStr = &quot;&#123;\&quot;name\&quot;:\&quot;和大佬\&quot;,\&quot;age\&quot;:28,\&quot;position\&quot;:\&quot;web开发一把手\&quot;,\&quot;hobby\&quot;:\&quot;肥仔快乐水\&quot;&#125;&quot;;</span><br><span class="line">        JsonToObject.jsonToJavaBean(objectStr);</span><br><span class="line"></span><br><span class="line">        // json to list</span><br><span class="line">        String listStr = &quot;[&#123;\&quot;name\&quot;:\&quot;和大佬\&quot;,\&quot;age\&quot;:28,\&quot;position\&quot;:\&quot;web开发一把手\&quot;,\&quot;hobby\&quot;:\&quot;肥仔快乐水\&quot;&#125;,&#123;\&quot;name\&quot;:\&quot;小牛\&quot;,\&quot;age\&quot;:25,\&quot;position\&quot;:\&quot;java开发小喽喽\&quot;,\&quot;hobby\&quot;:\&quot;霸王洗发水\&quot;&#125;]&quot;;</span><br><span class="line">        JsonToObject.jsonToList(listStr);</span><br><span class="line"></span><br><span class="line">        // json to map</span><br><span class="line">        String mapStr = &quot;&#123;\&quot;gay1\&quot;:&#123;\&quot;name\&quot;:\&quot;和大佬\&quot;,\&quot;age\&quot;:28,\&quot;position\&quot;:\&quot;web开发一把手\&quot;,\&quot;hobby\&quot;:\&quot;肥仔快乐水\&quot;&#125;,\&quot;gay2\&quot;:&#123;\&quot;name\&quot;:\&quot;小牛\&quot;,\&quot;age\&quot;:25,\&quot;position\&quot;:\&quot;java开发小喽喽\&quot;,\&quot;hobby\&quot;:\&quot;霸王洗发水\&quot;&#125;&#125;&quot;;</span><br><span class="line">        JsonToObject.jsonToMap(mapStr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">======下面是实例对象通过gson转换为json字符串======</span><br><span class="line">&#123;&quot;name&quot;:&quot;和大佬&quot;,&quot;age&quot;:28,&quot;position&quot;:&quot;web开发一把手&quot;,&quot;hobby&quot;:&quot;肥仔快乐水&quot;,&quot;createTime&quot;:&quot;2018-06-21 16:39:03&quot;&#125;</span><br><span class="line">[&#123;&quot;name&quot;:&quot;和大佬&quot;,&quot;age&quot;:28,&quot;position&quot;:&quot;web开发一把手&quot;,&quot;hobby&quot;:&quot;肥仔快乐水&quot;,&quot;createTime&quot;:&quot;2018-06-21 16:39:03&quot;&#125;,&#123;&quot;name&quot;:&quot;小牛&quot;,&quot;age&quot;:25,&quot;position&quot;:&quot;java开发小喽喽&quot;,&quot;hobby&quot;:&quot;霸王洗发水&quot;,&quot;createTime&quot;:&quot;2018-06-21 16:39:03&quot;&#125;]</span><br><span class="line">&#123;&quot;gay1&quot;:&#123;&quot;name&quot;:&quot;和大佬&quot;,&quot;age&quot;:28,&quot;position&quot;:&quot;web开发一把手&quot;,&quot;hobby&quot;:&quot;肥仔快乐水&quot;,&quot;createTime&quot;:&quot;2018-06-21 16:39:03&quot;&#125;,&quot;gay2&quot;:&#123;&quot;name&quot;:&quot;小牛&quot;,&quot;age&quot;:25,&quot;position&quot;:&quot;java开发小喽喽&quot;,&quot;hobby&quot;:&quot;霸王洗发水&quot;,&quot;createTime&quot;:&quot;2018-06-21 16:39:03&quot;&#125;&#125;</span><br><span class="line">======下面是json直接通过gson转换为实例对象======</span><br><span class="line">com.ctrip.gs.live.business.service.remoting.soa20.test.JsonConverTestDemo$Staff@3f6fc94f</span><br><span class="line">com.ctrip.gs.live.business.service.remoting.soa20.test.JsonConverTestDemo$Staff@2e6ee035</span><br><span class="line">com.ctrip.gs.live.business.service.remoting.soa20.test.JsonConverTestDemo$Staff@7141cf63</span><br><span class="line">key: gay1  value: com.ctrip.gs.live.business.service.remoting.soa20.test.JsonConverTestDemo$Staff@1f2e8e93</span><br><span class="line">key: gay2  value: com.ctrip.gs.live.business.service.remoting.soa20.test.JsonConverTestDemo$Staff@299264e3</span><br></pre></td></tr></table></figure></p><h4 id="java对象和json字符串之间转换工具之fastjson"><a href="#java对象和json字符串之间转换工具之fastjson" class="headerlink" title="java对象和json字符串之间转换工具之fastjson"></a>java对象和json字符串之间转换工具之fastjson</h4><p><a href="https://skytline.github.io/2018/06/21/java%E5%AF%B9%E8%B1%A1%E5%92%8Cjson%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2%E5%B7%A5%E5%85%B7%E4%B9%8BGson/" target="_blank" rel="noopener">点击跳转</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Gson&quot;&gt;&lt;a href=&quot;#Gson&quot; class=&quot;headerlink&quot; title=&quot;Gson&quot;&gt;&lt;/a&gt;Gson&lt;/h3&gt;&lt;h4 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Java future 和 Guava future的对比</title>
    <link href="http://yoursite.com/2018/06/19/Java%20future%20%E5%92%8C%20Guava%20future%E7%9A%84%E5%AF%B9%E6%AF%94/"/>
    <id>http://yoursite.com/2018/06/19/Java future 和 Guava future的对比/</id>
    <published>2018-06-19T03:46:31.000Z</published>
    <updated>2018-06-19T11:50:08.919Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Java-future"><a href="#Java-future" class="headerlink" title="Java future"></a>Java future</h3><h4 id="future介绍"><a href="#future介绍" class="headerlink" title="future介绍"></a>future介绍</h4><p>在并发编程时，一般使用runnable，然后扔给线程池完事，这种情况下不需要线程的结果。所以run的返回值是void类型。 线程是属于异步计算模型，所以你不可能直接从别的线程中得到函数返回值。<br>这时候，Future就出场了。Futrue可以监视目标线程调用call的情况，当你调用Future的get()方法以获得结果时，当前线程就开始阻塞，直接call方法结束返回结果。一个任务的执行结果又该怎么获取呢?这里就需要用到Future接口中的isDone()方法来判断任务是否执行完，<br>如果完成完成则可获取结果，如果没有完成则需要等待，可见虽然主线程中的多个任务是异步执行，但是无法确定任务什么时候执行完成，只能通过不断去监听以获取结果，所以这里是阻塞的。<br>Future模式是多线程开发中非常常见的一种设计模式。它的核心思想是异步调用。当我们需要调用一个函数方法时。如果这个函数执行很慢,那么我们就要进行等待。但有时候,我们可能并不急着要结果。<br>因此,我们可以让被调用者立即返回,让他在后台慢慢处理这个请求。对于调用者来说,则可以先处理一些其他任务,在真正需要数据的场合再去尝试获取需要的数据。</p><p>普通方式和Future模式的差别：<br><img src="普通方式和future模式的差距.jpg" alt="两种方式的差异"></p><h4 id="future-demo"><a href="#future-demo" class="headerlink" title="future demo"></a>future demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">package com.ctrip.gs.live.business.service.remoting.soa20.test;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.concurrent.*;</span><br><span class="line"></span><br><span class="line">public class FutureTestDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static class Mytask implements Callable &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Object call() throws Exception &#123;</span><br><span class="line">            String tid = String.valueOf(Thread.currentThread().getId());</span><br><span class="line">            // %s表示输出字符串，也就是将后面的字符串替换模式中的%s</span><br><span class="line">            // %n表示换行</span><br><span class="line">            System.out.printf(&quot;Thread#%s : in call\n&quot;, tid);</span><br><span class="line">            Thread.sleep(10000);</span><br><span class="line">            return tid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws ExecutionException, InterruptedException &#123;</span><br><span class="line">        List&lt;Future&lt;String&gt;&gt; results = new ArrayList&lt;Future&lt;String&gt;&gt;();</span><br><span class="line">        // 创建一个线程池</span><br><span class="line">//        ExecutorService pool = Executors.newFixedThreadPool(5);</span><br><span class="line">        ExecutorService es = Executors.newCachedThreadPool();</span><br><span class="line">        for (int i = 0; i &lt; 10; i++)</span><br><span class="line">            results.add(es.submit(new Mytask()));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========线程执行结束==========&quot;);</span><br><span class="line"></span><br><span class="line">        for (Future&lt;String&gt; res : results) &#123;</span><br><span class="line">            System.out.println(&quot;Future中get结果&quot; + res.get());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========Future方法get结束==========&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Thread#10 : in call</span><br><span class="line">Thread#16 : in call</span><br><span class="line">Thread#12 : in call</span><br><span class="line">Thread#17 : in call</span><br><span class="line">Thread#13 : in call</span><br><span class="line">Thread#19 : in call</span><br><span class="line">Thread#18 : in call</span><br><span class="line">==========线程执行结束==========</span><br><span class="line">Thread#15 : in call</span><br><span class="line">Thread#14 : in call</span><br><span class="line">Thread#11 : in call</span><br><span class="line">Future中get结果10</span><br><span class="line">Future中get结果11</span><br><span class="line">Future中get结果12</span><br><span class="line">Future中get结果13</span><br><span class="line">Future中get结果14</span><br><span class="line">Future中get结果15</span><br><span class="line">Future中get结果16</span><br><span class="line">Future中get结果17</span><br><span class="line">Future中get结果18</span><br><span class="line">Future中get结果19</span><br><span class="line">==========Future方法get结束==========</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br></pre></td></tr></table></figure></p><h3 id="Guava-future"><a href="#Guava-future" class="headerlink" title="Guava future"></a>Guava future</h3><p>ListenableFuture是可以监听的Future，它是对java原生Future的扩展增强。Future表示一个异步计算任务，当任务完成时可以得到计算结果。如果希望计算完成时马上就拿到结果展示给用户或者做另外的计算，<br>就必须使用另一个线程不断的查询计算状态。这样做会使得代码复杂，且效率低下。如果使用ListenableFuture，Guava会帮助检测Future是否完成了，如果完成就自动调用回调函数，这样可以减少并发程序的复杂度。</p><h4 id="Guava-future-demo"><a href="#Guava-future-demo" class="headerlink" title="Guava future demo"></a>Guava future demo</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package com.ctrip.gs.live.business.service.remoting.soa20.test;</span><br><span class="line"></span><br><span class="line">import com.google.common.util.concurrent.*;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.concurrent.Callable;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line">public class FutureTestDemo &#123;</span><br><span class="line"></span><br><span class="line">    public static class Mytask implements Callable &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public Object call() throws Exception &#123;</span><br><span class="line">            String tid = String.valueOf(Thread.currentThread().getId());</span><br><span class="line">            // %s表示输出字符串，也就是将后面的字符串替换模式中的%s</span><br><span class="line">            // %n表示换行</span><br><span class="line">            System.out.printf(&quot;Thread#%s : in call\n&quot;, tid);</span><br><span class="line">            Thread.sleep(10000);</span><br><span class="line">            return tid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ListeningExecutorService service = MoreExecutors.listeningDecorator(Executors.newCachedThreadPool());</span><br><span class="line">        List&lt;ListenableFuture&lt;String&gt;&gt; results = new ArrayList&lt;ListenableFuture&lt;String&gt;&gt;();</span><br><span class="line">        for (int i = 0; i &lt; 10; i++)</span><br><span class="line">            results.add(service.submit(new Mytask()));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========线程执行结束==========&quot;);</span><br><span class="line"></span><br><span class="line">        for (ListenableFuture&lt;String&gt; lisFuture : results) &#123;</span><br><span class="line">            Futures.addCallback(lisFuture, new FutureCallback&lt;String&gt;() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void onSuccess(String res) &#123;</span><br><span class="line">                    try &#123;</span><br><span class="line">                        Thread.sleep(5000);</span><br><span class="line">                    &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(&quot;lisFuture: &quot; + res);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                @Override</span><br><span class="line">                public void onFailure(Throwable t) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;==========Future方法get结束==========&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Thread#11 : in call</span><br><span class="line">Thread#12 : in call</span><br><span class="line">Thread#18 : in call</span><br><span class="line">Thread#17 : in call</span><br><span class="line">Thread#15 : in call</span><br><span class="line">Thread#16 : in call</span><br><span class="line">Thread#20 : in call</span><br><span class="line">==========线程执行结束==========</span><br><span class="line">Thread#14 : in call</span><br><span class="line">Thread#13 : in call</span><br><span class="line">==========Future方法get结束==========</span><br><span class="line">Thread#19 : in call</span><br><span class="line">lisFuture: 11</span><br><span class="line">lisFuture: 15</span><br><span class="line">lisFuture: 17</span><br><span class="line">lisFuture: 12</span><br><span class="line">lisFuture: 18</span><br><span class="line">lisFuture: 20</span><br><span class="line">lisFuture: 16</span><br><span class="line">lisFuture: 14</span><br><span class="line">lisFuture: 13</span><br><span class="line">lisFuture: 19</span><br></pre></td></tr></table></figure></p><h3 id="两者的区别"><a href="#两者的区别" class="headerlink" title="两者的区别"></a>两者的区别</h3><ol><li>Java future是<strong> 异步阻塞的 </strong>，主要功能在于获取任务执行结果和对异步任务的控制，由于Future获取任务结果是阻塞的，所以将会依次调用Future.get()方法，这样的效率会很低。很可能第一个下载速度很慢，则会拖累整个下载速度；</li><li>Guava future是<strong> 异步非阻塞的 </strong>，目的就是多任务异步执行，通过回调的方式来获取执行结果而不需轮询任务状态。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Java-future&quot;&gt;&lt;a href=&quot;#Java-future&quot; class=&quot;headerlink&quot; title=&quot;Java future&quot;&gt;&lt;/a&gt;Java future&lt;/h3&gt;&lt;h4 id=&quot;future介绍&quot;&gt;&lt;a href=&quot;#future介绍&quot;
      
    
    </summary>
    
      <category term="thread" scheme="http://yoursite.com/categories/thread/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA导入Spring源码</title>
    <link href="http://yoursite.com/2018/06/05/IntelliJ%20IDEA%E5%AF%BC%E5%85%A5Spring%E6%BA%90%E7%A0%81/"/>
    <id>http://yoursite.com/2018/06/05/IntelliJ IDEA导入Spring源码/</id>
    <published>2018-06-05T06:58:31.000Z</published>
    <updated>2018-06-19T09:30:29.637Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下载spring源码"><a href="#下载spring源码" class="headerlink" title="下载spring源码"></a>下载spring源码</h4><p>Spring源码现在在github中，因此需要先安装git(具体下载安装git就自行百度)，现在假设已经安装好git并且设置好了用户名和邮箱，使用下面的命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git://github.com/SpringSource/Spring-framework.git</span><br></pre></td></tr></table></figure></p><h4 id="下载gradle"><a href="#下载gradle" class="headerlink" title="下载gradle"></a>下载gradle</h4><p><a href="https://gradle.org/releases/" target="_blank" rel="noopener">Gradle下载地址</a><br><img src="1528182320.jpg" alt="点击下载"><br>配置：<br>1、创建系统环境变量：GRADLE_HOME gradle指定目录,eg:D:\software\gradle\gradle-4.8\bin<br>2、path：;%GRADLE_HOME%<br>（Linux环境请添加到.bash_profile中<br>3、配置好了后打开cmd，输入gradle -v看是否成功</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><p>安装好Gradle之后就可以根据步骤进行编译了。<br>最好将jdk版本升级到1.8，因为编译项目的时候有一个-XX:MaxMetaspaceSize=1024m的参数需要jdk1.8才支持，否则会报错。 </p><p>spring目录中：import-into-eclipse.*是导入Eclipse的脚本，点击运行之后会有提示。<br>因为我用的是idea，因此需要使用import-into-idea.md，最后一个文件是文本文件，打开之后会发现这是一个指导用户怎么编译的说明（这是一个用markdown语法写的文件）。<br><img src="spring-framework-import.png" alt="framework"><br>打开cmd，cd到spring源码目录中，使用命令：gradlew.bat cleanIdea :spring-oxm:compileTestJava。耐心等待。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradlew.bat cleanIdea :spring-oxm:compileTestJava</span><br></pre></td></tr></table></figure></p><p><img src="spring-framework-compile.jpg" alt="compile"></p><h4 id="导入IDEA"><a href="#导入IDEA" class="headerlink" title="导入IDEA"></a>导入IDEA</h4><p>打开IDEA，File-&gt;New-&gt;Project From Existing Sources…，选中Spring-framework文件夹，OK-&gt;Import project from external model，选中Gradle，点击Next，然后点击Finish，<br>等待IDEA导入即可。<br>gradle开始编译：<br><img src="idea_gradle_compile.jpg" alt="compileing"><br>gradle编译结束：<br><img src="idea_gradle_compile_sucess2.jpg" alt="compileSuccess"></p><h4 id="spring-framework"><a href="#spring-framework" class="headerlink" title="spring-framework"></a>spring-framework</h4><p>如果你嫌上面的步骤麻烦，或者你就是单纯只想运行spring编译好的源码，可以直接下载：<br>链接：<a href="https://pan.baidu.com/s/10x3X4rFooLbzFxLs6e2MwQ" target="_blank" rel="noopener">https://pan.baidu.com/s/10x3X4rFooLbzFxLs6e2MwQ</a><br>密码：xpz2</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;下载spring源码&quot;&gt;&lt;a href=&quot;#下载spring源码&quot; class=&quot;headerlink&quot; title=&quot;下载spring源码&quot;&gt;&lt;/a&gt;下载spring源码&lt;/h4&gt;&lt;p&gt;Spring源码现在在github中，因此需要先安装git(具体下载安装gi
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="spring源码学习" scheme="http://yoursite.com/tags/spring%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Hexo配置文件详解</title>
    <link href="http://yoursite.com/2018/05/15/Hexo%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2018/05/15/Hexo配置文件详解/</id>
    <published>2018-05-15T11:30:17.000Z</published>
    <updated>2018-06-19T09:39:17.519Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-网站配置文件"><a href="#1-网站配置文件" class="headerlink" title="1.网站配置文件"></a>1.网站配置文件</h3><h4 id="1-1配置文件说明"><a href="#1-1配置文件说明" class="headerlink" title="1.1配置文件说明"></a>1.1配置文件说明</h4><p>1.1.1网站配置文件的存储位置：bolg文件夹/_config.yml;<br>1.1.2配置文件中，冒号后面一定要加空格;<br>1.1.3<a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">Hexo官方配置说明</a>;</p><h4 id="1-2配置文件详解"><a href="#1-2配置文件详解" class="headerlink" title="1.2配置文件详解"></a>1.2配置文件详解</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"># Hexo Configuration Hexo配置文件</span><br><span class="line">## Docs: https://hexo.io/docs/configuration.html</span><br><span class="line">## Source: https://github.com/hexojs/hexo/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 网站信息</span><br><span class="line">#标题</span><br><span class="line">title: 学志の博客</span><br><span class="line">#副标题</span><br><span class="line">subtitle: 记录学习的技能和遇到的问题</span><br><span class="line">#网站描述</span><br><span class="line">description: 做自己爱做的事，爱自己在做的事！</span><br><span class="line">#作者昵称</span><br><span class="line">author: 张学志</span><br><span class="line">#网站语言，默认英语，设置简体汉语</span><br><span class="line">language: zh-Hans</span><br><span class="line"></span><br><span class="line">#时区，默认电脑时区</span><br><span class="line">#timezone: </span><br><span class="line">timezone: Asia/Shanghai</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 网址设置</span><br><span class="line">#如果网站是放在子目录中，将url设置成&apos;http://yoursite.com/child&apos;，将root设置成&apos;/child/&apos;</span><br><span class="line">## If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;</span><br><span class="line">#网址</span><br><span class="line">url: http://zhangxuezhi.com</span><br><span class="line">#网站根目录。如果网站是放在子目录中，将root设置成&apos;子目录名&apos;</span><br><span class="line">root: /</span><br><span class="line">#文章链接地址格式 。即文章存放的目录。</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 目录设置</span><br><span class="line">#资源文件夹，放在里面的文件会上传到github中</span><br><span class="line">source_dir: source</span><br><span class="line">#公共文件夹，存放生成的静态文件</span><br><span class="line">public_dir: public</span><br><span class="line">#标签文件夹，默认是tags。实际存放在source/tags中。</span><br><span class="line">tag_dir: tags</span><br><span class="line">rss_dir: rss</span><br><span class="line">#档案文件夹，默认是archives。</span><br><span class="line">archive_dir: archives</span><br><span class="line">#分类文件夹，默认是categories。实际存放在source/categories中。</span><br><span class="line">category_dir: categories</span><br><span class="line">#代码文件夹，默认是downloads/code</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">#国际化文件夹，默认跟language相同</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">#不需要渲染的文件夹或文件夹,放在[]中</span><br><span class="line"># 这两个文件是百度和google的站长验证文件，不能渲染，否则会改变内容，不能验证过</span><br><span class="line">skip_render: [baidu_verify_R9MZjdMkXT.html, google0f8fac7da2b48ef8.html, README.md, 模板.md]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 写作选项</span><br><span class="line"># 新建博文（帖子）的默认名称</span><br><span class="line"># File name of new posts</span><br><span class="line">new_post_name: :title.md </span><br><span class="line">#默认布局模板是post，而不是draft和page</span><br><span class="line">default_layout: post</span><br><span class="line">#是否将标题转换成标题形式（首字母大写）</span><br><span class="line">titlecase: false # Transform title into titlecase</span><br><span class="line">#在新标签页面中打开网页</span><br><span class="line">external_link: true # Open external links in new tab</span><br><span class="line">filename_case: 0</span><br><span class="line">#是否渲染草稿</span><br><span class="line">render_drafts: false</span><br><span class="line">#启动 Asset 文件夹</span><br><span class="line">post_asset_folder: false</span><br><span class="line">#把链接改为与根目录的相对位址</span><br><span class="line">relative_link: false</span><br><span class="line">#显示未来的文章</span><br><span class="line">future: true</span><br><span class="line">#代码块的设置</span><br><span class="line">highlight:</span><br><span class="line">  enable: true          #  使用代码高亮</span><br><span class="line">  line_number: true # 显示行号</span><br><span class="line">  auto_detect: true  # 自动检测语言</span><br><span class="line">  tab_replace:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分类和标签</span><br><span class="line"># 默认分类</span><br><span class="line">default_category: uncategorized</span><br><span class="line">#分类别名</span><br><span class="line">category_map:</span><br><span class="line">#标签别名</span><br><span class="line">tag_map:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 日期和时间格式</span><br><span class="line">#Hexo 使用 Moment.js 来解析和显示时间。</span><br><span class="line">## You can customize the date format as defined in</span><br><span class="line">## http://momentjs.com/docs/#/displaying/format/</span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 分页配置</span><br><span class="line"># ---------------下面选项需要对应插件的支持---------------</span><br><span class="line"># npm install hexo-generator-index --save</span><br><span class="line"># npm install hexo-generator-archive --save</span><br><span class="line"># npm install hexo-generator-category --save</span><br><span class="line"># npm install hexo-generator-tag --save</span><br><span class="line">## Set per_page to 0 to disable pagination</span><br><span class="line">#每页显示的文章量 </span><br><span class="line">#per_page: 20</span><br><span class="line">#首页的分页设置</span><br><span class="line">index_generator:</span><br><span class="line">  per_page: 5</span><br><span class="line">#归档页的分页设置</span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 30</span><br><span class="line">  yearly: true</span><br><span class="line">  monthly: true</span><br><span class="line">#标签页的分页设置</span><br><span class="line">tag_generator:</span><br><span class="line">  per_page: 20</span><br><span class="line"></span><br><span class="line">#分页路径，在public中可以看到</span><br><span class="line">#pagination_dir: page</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Extensions 拓展插件配置</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">plugins: </span><br><span class="line">baidusitemap: </span><br><span class="line">  path: baidusitemap.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 配置RSS</span><br><span class="line">feed: </span><br><span class="line">  #feed 类型 (atom/rss2)</span><br><span class="line">  type: atom   </span><br><span class="line">  #rss 路径</span><br><span class="line">  path: atom.xml  </span><br><span class="line">  #在 rss 中最多生成的文章数(0显示所有)</span><br><span class="line">  limit: 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 自定义站点内容搜索</span><br><span class="line"># 需要先安装插件：</span><br><span class="line"># npm install hexo-generator-search --save</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  # 如只想索引文章，可设置为post</span><br><span class="line">  field: all </span><br><span class="line"></span><br><span class="line"># 主题配置</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">#theme: false #禁用主题</span><br><span class="line">#theme: landscape</span><br><span class="line">theme: next</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 部署配置</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  #repo: https://github.com/xuezhisd/xuezhisd.github.io.git</span><br><span class="line">  repo: </span><br><span class="line">    # 部署到github</span><br><span class="line">    github: git@github.com:xuezhisd/xuezhisd.github.io.git,master</span><br><span class="line">    # 部署到coding.net。取消注释，可同时部署</span><br><span class="line">    #coding: git@git.coding.net:xuezhisd/blog.git,coding-pages</span><br><span class="line">  #type: baidu_url_submitter</span><br></pre></td></tr></table></figure><h4 id="1-3主题设置"><a href="#1-3主题设置" class="headerlink" title="1.3主题设置"></a>1.3主题设置</h4><p>1.默认主题是landscape；<br>2.<a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo官方主题页面</a>。从中选择喜欢的主题，下载并放到themes文件中；<br>3.我使用的主题是<a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">NexT</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-网站配置文件&quot;&gt;&lt;a href=&quot;#1-网站配置文件&quot; class=&quot;headerlink&quot; title=&quot;1.网站配置文件&quot;&gt;&lt;/a&gt;1.网站配置文件&lt;/h3&gt;&lt;h4 id=&quot;1-1配置文件说明&quot;&gt;&lt;a href=&quot;#1-1配置文件说明&quot; class=&quot;he
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo使用技巧</title>
    <link href="http://yoursite.com/2018/05/15/Hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2018/05/15/Hexo使用技巧/</id>
    <published>2018-05-15T10:57:17.000Z</published>
    <updated>2018-06-19T09:39:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="修改主题"><a href="#修改主题" class="headerlink" title="修改主题"></a>修改主题</h3><p>打开 themes/next/_config.yml 文件，搜索 scheme 关键字，将你需用启用的 scheme 前面注释 # 去除即可。推荐使用next主题，因为可扩展性强，网上文章比较多，当然你也可以选择其他<a href="">主题</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Schemes</span><br><span class="line">#scheme: Muse # 默认 Scheme，这是 NexT 最初的版本，黑白主调，大量留白</span><br><span class="line">#scheme: Mist # Muse 的紧凑版本，整洁有序的单栏外观</span><br><span class="line">scheme: Pisces # 双栏 Scheme，小家碧玉似的清新</span><br><span class="line">#scheme: Gemini # 类似 Pisces</span><br></pre></td></tr></table></figure></p><h3 id="菜单页"><a href="#菜单页" class="headerlink" title="菜单页"></a>菜单页</h3><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br><span class="line"></span><br><span class="line"># Enable/Disable menu icons.</span><br><span class="line">menu_icons:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><p>结构：<code>Key: /link/ || icon</code><br>Key：其中 Key name 是一个名称，这个名称并不直接显示在页面上，只将用于匹配图标以及翻译，对应的翻译配置文件为D:\Blog\blog\themes\next\languages\zh-Hans.yml里面；<br>link：menu索引路径，在source目录下，创建命令：hexo new page “pagename”；<br>icon：图标,可以自定义<a href="http://www.bootcss.com/p/font-awesome/#" target="_blank" rel="noopener">FontAwsome官网</a>；</p><blockquote><p>区分一下什么是页面，什么是文章：<br>在hexo中menu下的内容都是新的页面我们可以通过hexo new page “pagename” 创建，hexo默认的页面只有home,archives,tags 三个，<br>之后我们写的博文就是文章，通过hexo new “name” 创建的name.md 文件在根目录的source_posts 下，<br>在每一个文章的头部，我们可以配置其tags或者categories内容，相当于文章是页面的下一级；</p></blockquote><p>如图：<br><img src="20180516001.jpg" alt="menu"><br>点击进去对应的menu二级目录，找到index.md就可以修改页面内容。</p><h4 id="关联博客"><a href="#关联博客" class="headerlink" title="关联博客"></a>关联博客</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo+github</span><br><span class="line">date: 2018-05-15 15:58:31</span><br><span class="line">tags: [Hexo,github]</span><br><span class="line">categories: blog</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>tags、categories都是支持数组的形式的，可以添加多个tags、categories。这样我们在tags、categories页面就可以看见相应的分类了。</p><h4 id="新建404界面"><a href="#新建404界面" class="headerlink" title="新建404界面"></a>新建404界面</h4><p>在站点根目录下,输入 hexo new page 404 ,默认在 Hexo 站点下/source/404/index.md 打开新建的404界面，在顶部插入一行，写上 permalink: /404 ，<br>这表示指定该页固定链接为 http://“主页”/404.html。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: #404 Not Found：该页无法显示</span><br><span class="line">date: 2017-09-06 15:37:18</span><br><span class="line">comments: false</span><br><span class="line">permalink: /404</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p><p>如果你不想编辑属于自己的404界面,可以显示腾讯公益404界面,代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt;</span><br><span class="line">  &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;</span><br><span class="line">  &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;script type=&quot;text/plain&quot; src=&quot;http://www.qq.com/404/search_children.js&quot;</span><br><span class="line">          charset=&quot;utf-8&quot; homePageUrl=&quot;/&quot;</span><br><span class="line">          homePageName=&quot;回到我的主页&quot;&gt;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/data.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">  &lt;script src=&quot;https://qzone.qq.com/gy/404/page.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><h3 id="头像设置"><a href="#头像设置" class="headerlink" title="头像设置"></a>头像设置</h3><h4 id="修改头像"><a href="#修改头像" class="headerlink" title="修改头像"></a>修改头像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Sidebar Avatar</span><br><span class="line"># in theme directory(source/images): /images/avatar.jpg</span><br><span class="line"># in site  directory(source/uploads): /uploads/avatar.jpg</span><br><span class="line">avatar: http://example.com/avatar.png</span><br></pre></td></tr></table></figure><p>可以使用http链接，也可以使用本地照片，把图片放入 themes/next/source/images 下,修改 avatar：</p><blockquote><p>avatar: /images/avatar.gif</p></blockquote><h4 id="设置头像边框为圆形框"><a href="#设置头像边框为圆形框" class="headerlink" title="设置头像边框为圆形框"></a>设置头像边框为圆形框</h4><p>打开位于 themes/next/source/css/_common/components/sidebar/sidebar-author.syl 文件,修改如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"> // 修改头像边框</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  -webkit-border-radius: 50%;</span><br><span class="line">  -moz-border-radius: 50%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="鼠标放置头像上旋转"><a href="#鼠标放置头像上旋转" class="headerlink" title="鼠标放置头像上旋转"></a>鼠标放置头像上旋转</h4><p>打开\themes\next\source\css_common\components\sidebar\sidebar-author.styl 文件,修改如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line"> // 修改头像边框</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  -webkit-border-radius: 50%;</span><br><span class="line">  -moz-border-radius: 50%;</span><br><span class="line">  // 设置旋转</span><br><span class="line">  transition: 1.4s all;</span><br><span class="line">&#125;</span><br><span class="line">// 可旋转的圆形头像,`hover`动作</span><br><span class="line">.site-author-image:hover &#123;</span><br><span class="line">    -webkit-transform: rotate(360deg);</span><br><span class="line">    -moz-transform: rotate(360deg);</span><br><span class="line">    -ms-transform: rotate(360deg);</span><br><span class="line">    -transform: rotate(360deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="浏览页面的时候显示当前浏览进度"><a href="#浏览页面的时候显示当前浏览进度" class="headerlink" title="浏览页面的时候显示当前浏览进度"></a>浏览页面的时候显示当前浏览进度</h3><p>打开 themes/next/_config.yml ,搜索关键字 scrollpercent ,把 false 改为 true。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Scroll percent label in b2t button</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure></p><p>如果想把 top按钮放在侧边栏,打开 themes/next/_config.yml ,搜索关键字 b2t ,把 false 改为 true。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Back to top in sidebar</span><br><span class="line">  b2t: true</span><br><span class="line"></span><br><span class="line">  # Scroll percent label in b2t button</span><br><span class="line">  scrollpercent: true</span><br></pre></td></tr></table></figure></p><h3 id="特效"><a href="#特效" class="headerlink" title="特效"></a>特效</h3><h4 id="添加动态背景"><a href="#添加动态背景" class="headerlink" title="添加动态背景"></a>添加动态背景</h4><blockquote><p>如果next主题在5.1.1以上的话就不用我这样设置，<br>直接在主题配置文件中找到canvas_nest: false，把它改为canvas_nest: true就行了（注意分号后面要加一个空格）;</p></blockquote><h4 id="实现点击出现桃心效果"><a href="#实现点击出现桃心效果" class="headerlink" title="实现点击出现桃心效果"></a>实现点击出现桃心效果</h4><p>新建love.js文件并且将代码复制进去，然后保存。将love.js文件放到路径/themes/next/source/js/src里面，<br>然后打开\themes\next\layout_layout.swig文件,在末尾（在前面引用会出现找不到的bug）添加以下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 页面点击小红心 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/love.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>love.js内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;</span><br><span class="line">.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;</span><br><span class="line">function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);</span><br><span class="line">background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),</span><br><span class="line">t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;</span><br><span class="line">var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure></p><h4 id="修改文章内链接文本样式"><a href="#修改文章内链接文本样式" class="headerlink" title="修改文章内链接文本样式"></a>修改文章内链接文本样式</h4><p>修改文件 themes\next\source\css_common\components\post\post.styl，在末尾添加如下css样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 文章内链接文本样式</span><br><span class="line">.post-body p a&#123;</span><br><span class="line">  color: #0593d3;</span><br><span class="line">  border-bottom: none;</span><br><span class="line">  border-bottom: 1px solid #0593d3;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    color: #fc6423;</span><br><span class="line">    border-bottom: none;</span><br><span class="line">    border-bottom: 1px solid #fc6423;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中选择.post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p><h4 id="代码块自定义样式"><a href="#代码块自定义样式" class="headerlink" title="代码块自定义样式"></a>代码块自定义样式</h4><p>打开\themes\next\source\css_custom\custom.styl:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">code &#123;</span><br><span class="line">    color: #ff7600;</span><br><span class="line">    background: #fbf7f8;</span><br><span class="line">    margin: 2px;</span><br><span class="line">&#125;</span><br><span class="line">// 边框的自定义样式</span><br><span class="line">.highlight, pre &#123;</span><br><span class="line">    margin: 5px 0;</span><br><span class="line">    padding: 5px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">&#125;</span><br><span class="line">.highlight, code, pre &#123;</span><br><span class="line">    border: 1px solid #d6d6d6;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="添加顶部加载条"><a href="#添加顶部加载条" class="headerlink" title="添加顶部加载条"></a>添加顶部加载条</h4><p>打开/themes/next/layout/_partials/head.swig文件，添加以下代码:</p><blockquote><script src="//cdn.bootcss.com/pace/1.0.2/pace.min.js"></script></blockquote><link href="//cdn.bootcss.com/pace/1.0.2/themes/pink/pace-theme-flash.css" rel="stylesheet"><p>但是，默认的是粉色的，要改变颜色可以在/themes/next/layout/_partials/head.swig文件中添加如下代码（接在刚才link的后面）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">    .pace .pace-progress &#123;</span><br><span class="line">        background: #1E92FB; /*进度条颜色*/</span><br><span class="line">        height: 3px;</span><br><span class="line">    &#125;</span><br><span class="line">    .pace .pace-progress-inner &#123;</span><br><span class="line">         box-shadow: 0 0 10px #1E92FB, 0 0 5px     #1E92FB; /*阴影颜色*/</span><br><span class="line">    &#125;</span><br><span class="line">    .pace .pace-activity &#123;</span><br><span class="line">        border-top-color: #1E92FB;    /*上边框颜色*/</span><br><span class="line">        border-left-color: #1E92FB;    /*左边框颜色*/</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure></p><h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><h4 id="在网站底部加上访问量"><a href="#在网站底部加上访问量" class="headerlink" title="在网站底部加上访问量"></a>在网站底部加上访问量</h4><p>打开\themes\next\layout_partials\footer.swig文件,在copyright前加上画红线这句话：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>然后再合适的位置添加显示统计的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;powered-by&quot;&gt;</span><br><span class="line">&lt;i class=&quot;fa fa-user-md&quot;&gt;&lt;/i&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">  本站访客数:&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>在这里有两中不同计算方式的统计代码：</p><ol><li>pv的方式，单个用户连续点击n篇文章，记录n次访问量 :<blockquote><p><span id="busuanzi_container_site_pv"><br> 本站总访问量<span id="busuanzi_value_site_pv"></span>次<br></span></p></blockquote></li></ol><p>2 uv的方式，单个用户连续点击n篇文章，只记录1次访客数</p><blockquote><p><span id="busuanzi_container_site_uv"><br>  本站总访问量<span id="busuanzi_value_site_uv"></span>次<br></span></p></blockquote><h4 id="网站底部字数统计"><a href="#网站底部字数统计" class="headerlink" title="网站底部字数统计"></a>网站底部字数统计</h4><p>切换到根目录下，然后运行如下代码:</p><blockquote><p>$ npm install hexo-wordcount –save</p></blockquote><p>然后在/themes/next/layout/_partials/footer.swig文件尾部加上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class=&quot;theme-info&quot;&gt;</span><br><span class="line">  &lt;div class=&quot;powered-by&quot;&gt;&lt;/div&gt;</span><br><span class="line">  &lt;span class=&quot;post-count&quot;&gt;博客全站共&#123;&#123; totalcount(site) &#125;&#125;字&lt;/span&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p><h4 id="实现统计功能"><a href="#实现统计功能" class="headerlink" title="实现统计功能"></a>实现统计功能</h4><p>在根目录下安装 hexo-wordcount,运行：</p><blockquote><p>$ npm install hexo-wordcount –save</p></blockquote><p>然后在主题的配置文件中，配置如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># Post wordcount display settings</span><br><span class="line"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class="line">post_wordcount:</span><br><span class="line">  item_text: true</span><br><span class="line">  # 单篇 字数统计</span><br><span class="line">  wordcount: true</span><br><span class="line">  # 单篇 阅读时长</span><br><span class="line">  min2read: true</span><br><span class="line">  # 网站 字数统计</span><br><span class="line">  totalcount: true</span><br><span class="line">  separated_meta: true</span><br></pre></td></tr></table></figure></p><h3 id="更多主题优化"><a href="#更多主题优化" class="headerlink" title="更多主题优化"></a>更多主题优化</h3><p>参照：<a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">next</a></p><h3 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h3><h4 id="插入本地图片"><a href="#插入本地图片" class="headerlink" title="插入本地图片"></a>插入本地图片</h4><h5 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h5><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure></p><h5 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h5><p>图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置_config.yml来生成。</p><blockquote><p>post_asset_folder: true</p></blockquote><p>config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new blog_test，在source/_posts中会生成文章blog_test.md和同名文件夹blog_test。<br>将图片资源放在blog_test中，文章就可以使用相对路径引用图片资源了。<br><em>上面的操作我一般都是偷懒，复制一个md文件，然后同时创建一个同名字的文件夹</em></p><blockquote><p><img src="20180516002.jpg" alt="结构"></p></blockquote><h4 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h4><p><a href="https://oss.console.aliyun.com/bucket/oss-cn-beijing/titanblog/overview" target="_blank" rel="noopener">百度云OOS</a></p><p><em>未完，待补充，敬请期待</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;修改主题&quot;&gt;&lt;a href=&quot;#修改主题&quot; class=&quot;headerlink&quot; title=&quot;修改主题&quot;&gt;&lt;/a&gt;修改主题&lt;/h3&gt;&lt;p&gt;打开 themes/next/_config.yml 文件，搜索 scheme 关键字，将你需用启用的 scheme 前面注
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="theme" scheme="http://yoursite.com/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+github</title>
    <link href="http://yoursite.com/2018/05/15/Hexo+github/"/>
    <id>http://yoursite.com/2018/05/15/Hexo+github/</id>
    <published>2018-05-15T07:58:31.000Z</published>
    <updated>2018-06-19T09:39:14.961Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-环境部署"><a href="#1-环境部署" class="headerlink" title="1.环境部署"></a>1.环境部署</h3><h4 id="1-1github"><a href="#1-1github" class="headerlink" title="1.1github"></a>1.1github</h4><p>登录到GitHub，点击GitHub中的New repository创建新仓库，仓库名应该为：用户名.github.io 这个用户名使用你的GitHub帐号名称代替，这是固定写法。</p><blockquote><p>skytline.github.io</p></blockquote><p><img src="20180515000.jpg" alt="skytline"></p><h4 id="1-2安装git"><a href="#1-2安装git" class="headerlink" title="1.2安装git"></a>1.2安装git</h4><p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。<br>如果想要了解Git的细节，参看廖雪峰老师的Git教程：<a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001373962845513aefd77a99f4145f0a2c7a7ca057e7570000" target="_blank" rel="noopener">Git教程</a>。<br>安装好之后，在菜单里搜索Git Bash，<br><img src="20180515001.jpg" alt="Git Bash"><br>设置user.name和user.email配置信息：</p><blockquote><p>git config –global user.name “你的GitHub用户名”<br>git config –global user.email “你的GitHub注册邮箱”<br>生成ssh密钥文件：<br>ssh-keygen -t rsa -C “你的GitHub注册邮箱”</p></blockquote><p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，<br><img src="20180515002.jpg" alt="rsa"><br>将id_rsa.pub内容全部复制,然后在github页面配置SSH keys：<br><img src="20180515003.jpg" alt="SSH Key"><br>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> ：<br><img src="20180515004.jpg" alt="testkey"><br>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，<br>为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p><h4 id="1-3安装Node-js"><a href="#1-3安装Node-js" class="headerlink" title="1.3安装Node.js"></a>1.3安装Node.js</h4><p>Hexo基于Node.js,，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 node -v :<br>检测npm是否安装成功，在命令行中输入npm -v :<br><img src="20180515006.jpg" alt="SSH Key"></p><blockquote><p>npm是什么东东？<br>npm其实是Node.js的包管理工具（package manager）。<br>为啥我们需要一个包管理工具呢？因为我们在Node.js上开发时，会用到很多别人写的JavaScript代码。如果我们要使用别人写的某个包，每次都根据名称搜索一下官方网站，下载代码，解压，再使用，非常繁琐。于是一个集中管理的工具应运而生：<br>大家都把自己开发的模块打包后放到npm官网上，如果要使用，直接通过npm安装就可以直接用，不用管代码存在哪，应该从哪下载。更重要的是，如果我们要使用模块A，而模块A又依赖于模块B，模块B又依赖于模块X和模块Y，npm可以根据依赖关系，<br>把所有依赖的包都下载下来并管理起来。否则，靠我们自己手动管理，肯定既麻烦又容易出错。</p></blockquote><p>到这了，安装Hexo的环境已经全部搭建完成。</p><h4 id="1-4安装Node-js"><a href="#1-4安装Node-js" class="headerlink" title="1.4安装Node.js"></a>1.4安装Node.js</h4><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。创建好后，进入文件夹中，按住shift键，右击鼠标点击命令行:选择在此处打开命令窗口；<br>使用npm命令安装Hexo，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>这个安装时间较长耐心等待，安装完成后，初始化我们的博客，输入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure></p><p>然后依次：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd blog</span><br><span class="line">hexo new test_my_site</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure></p><p>成功启动是这样的的：<br><img src="20180515007.png" alt="server"><br>这些命令在后面作介绍，完成后，打开浏览器输入地址：<br>localhost:4000<br><img src="20180515008.png" alt="success"><br>hexo常用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">hexo n  &quot;我的博客&quot; == hexo new  &quot;我的博客&quot;   #新建文章</span><br><span class="line">hexo g == hexo generate   #生成</span><br><span class="line">hexo s == hexo server   #启动服务预览</span><br><span class="line">hexo d == hexo deploy   #部署</span><br><span class="line"></span><br><span class="line">hexo server     #Hexo会监视文件变动并自动更新，无须重启服务器</span><br><span class="line">hexo server -s    #静态模式</span><br><span class="line">hexo server -p 5000     #更改端口</span><br><span class="line">hexo server -i 192.168.1.1     #自定义 IP</span><br><span class="line">hexo clean     #清除缓存，若是网页正常情况下可以忽略这条命令</span><br></pre></td></tr></table></figure></p><p>刚刚的三个命令依次是新建一篇博客文章、生成网页、在本地预览的操作。<br>如果想详细查看hexo s信息，则用命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s --debug</span><br></pre></td></tr></table></figure></p><h4 id="1-5部署github"><a href="#1-5部署github" class="headerlink" title="1.5部署github"></a>1.5部署github</h4><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在blog根目录里的_config.yml文件称为站点配置文件;</span><br><span class="line">在根目录里的themes文件夹，里面也有个_config.yml文件，这个称为主题配置文件；</span><br></pre></td></tr></table></figure></p><p>下一步将我们的Hexo与GitHub关联起来，打开站点的配置文件_config.yml，翻到最后修改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:/skyTLine/skyTLine.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>保存站点配置文件。</p><p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>这时，我们分别输入三条命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean </span><br><span class="line">hexo g </span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></p><ul><li>hexo g是生成静态的html文件，目录在public文件夹下，对应在文件夹2018/05/15(年目录/月目录/日目录); *<br>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href="http://xxxx.github.io" target="_blank" rel="noopener">http://xxxx.github.io</a> (知乎排版可能会出现”http://“字样，参考下图)<br>比如我的xxxx就是我的GitHub用户名：<a href="https://skytline.github.io/" target="_blank" rel="noopener">https://skytline.github.io/</a><br>你就会发现你的博客已经上线了，可以在网络上被访问了。<h4 id="1-6注意事项"><a href="#1-6注意事项" class="headerlink" title="1.6注意事项"></a>1.6注意事项</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">重要的事说三遍：</span><br><span class="line">修改配置文件参数值时，一定要在冒号后面加一个空格！</span><br><span class="line">修改配置文件参数值时，一定要在冒号后面加一个空格！</span><br><span class="line">修改配置文件参数值时，一定要在冒号后面加一个空格！</span><br></pre></td></tr></table></figure></li></ul><p><img src="20180515010.jpg" alt="attention"><br>注意看冒号后面的红点，我用的是NotePad++，红点代表一个英文空格！</p><h4 id="1-7默认目录结构"><a href="#1-7默认目录结构" class="headerlink" title="1.7默认目录结构"></a>1.7默认目录结构</h4><ul><li>.deploy：执行hexo deploy命令部署到GitHub上的内容目录</li><li>public：执行hexo generate命令，输出的静态网页内容目录</li><li>scaffolds：layout模板文件目录，其中的md文件可以添加编辑</li><li>scripts：扩展脚本目录，这里可以自定义一些javascript脚本</li><li>source：文章源码目录，该目录下的markdown和html文件均会被hexo处理。该页面对应repo的根目录，404文件、favicon.ico文件，CNAME文件等都应该放这里，该目录下可新建页面目录。<ul><li>_drafts：草稿文章</li><li>_posts：发布文章</li></ul></li><li>themes：主题文件目录</li><li>_config.yml：全局配置文件，大多数的设置都在这里</li><li>package.json：应用程序数据，指明hexo的版本等信息，类似于一般软件中的关于按钮</li></ul><h4 id="1-8后续"><a href="#1-8后续" class="headerlink" title="1.8后续"></a>1.8后续</h4><p>未完，待续！</p><h4 id="1-9参考链接"><a href="#1-9参考链接" class="headerlink" title="1.9参考链接"></a>1.9参考链接</h4><p>1.GitHub+Hexo 搭建个人网站详细教程：<br> <a href="https://zhuanlan.zhihu.com/p/26625249" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/26625249</a><br>2.Hexo中文官方文档：<br> <a href="https://hexo.io/zh-cn/docs/setup.html" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/setup.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-环境部署&quot;&gt;&lt;a href=&quot;#1-环境部署&quot; class=&quot;headerlink&quot; title=&quot;1.环境部署&quot;&gt;&lt;/a&gt;1.环境部署&lt;/h3&gt;&lt;h4 id=&quot;1-1github&quot;&gt;&lt;a href=&quot;#1-1github&quot; class=&quot;headerlink
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hexo主题</title>
    <link href="http://yoursite.com/2018/05/15/Hexo%E4%B8%BB%E9%A2%98/"/>
    <id>http://yoursite.com/2018/05/15/Hexo主题/</id>
    <published>2018-05-15T04:31:17.000Z</published>
    <updated>2018-06-19T09:39:23.752Z</updated>
    
    <content type="html"><![CDATA[<p><em>未完成，请期待</em></p><p>1.hexo的next主题个性化教程:打造炫酷网站<br><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">https://www.jianshu.com/p/f054333ac9e6</a></p><p>2.Hexo+Next主题优化：<br><a href="https://zhuanlan.zhihu.com/p/30836436" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/30836436</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;未完成，请期待&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;1.hexo的next主题个性化教程:打造炫酷网站&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/f054333ac9e6&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http
      
    
    </summary>
    
      <category term="hexo" scheme="http://yoursite.com/categories/hexo/"/>
    
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="theme" scheme="http://yoursite.com/tags/theme/"/>
    
  </entry>
  
  <entry>
    <title>Template</title>
    <link href="http://yoursite.com/2018/05/11/template/"/>
    <id>http://yoursite.com/2018/05/11/template/</id>
    <published>2018-05-11T04:17:27.877Z</published>
    <updated>2018-05-15T12:05:44.760Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
